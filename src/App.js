import React, { useState, useRef } from 'react';
import NavBar from './NavBar';
import Footer from './Footer';
import { AiOutlinePlayCircle } from "react-icons/ai";
import { AiOutlinePauseCircle } from "react-icons/ai";
import { HiOutlineDownload } from "react-icons/hi";
import './App.css';

const App = () => {
  const [textPrompt, setTextPrompt] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [imageSrc, setImageSrc] = useState('');
  const audioRef = useRef(null);

  const query = async (data) => {
    try {
      const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/musicgen-small",
        {
          headers: { Authorization: "Bearer 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" },
          method: "POST",
          body: JSON.stringify(data),
        }
      );

      if (!response.ok) {
        const errorMessage = await response.text();
        console.error(`Error: ${response.status} - ${response.statusText} - ${errorMessage}`);
        throw new Error(`Network response was not ok: ${response.statusText}`);
      }

      const result = await response.blob();
      return result;
    } catch (error) {
      console.error('Fetch error:', error);
      throw error;
    }
  };
 const query1 = async (data) => {
    try {
      const response = await fetch(
        "https://api-inference.huggingface.co/models/sd-community/sdxl-flash",
        {
          headers : { Authorization : "Bearer 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" },
          method: "POST",
          body: JSON.stringify(data),
        }
      );

      if (!response.ok) {
        const errorMessage = await response.text();
        console.error(`Error: ${response.status} - ${response.statusText} - ${errorMessage}`);
        throw new Error(`Network response was not ok: ${response.statusText}`);
      }

      const result = await response.blob();
      return result;
    }
    catch (error) {
      console.error('Fetch error:', error);
      throw error;
    }
  };

  const generateMusic = async () => {
    if (!textPrompt) {
      alert('Please enter a text prompt');
      return;
    }

    try {
      const data = { inputs: textPrompt };
      const audioBlob = await query(data);
      const imageBlob = await query1(data);
      const imageURL = URL.createObjectURL(imageBlob);
      setImageSrc(imageURL);
      const newAudio = new Audio();
      const audioURL = URL.createObjectURL(audioBlob);
      newAudio.src = audioURL;
      newAudio.onended = () => setIsPlaying(false);
      newAudio.onerror = (e) => console.error('Audio error:', e);
      audioRef.current = newAudio;
      setIsPlaying(false);
    } catch (error) {
      console.error('Error generating music:', error);
    }
  };
 const handleDownload = () => {
    if (imageSrc) {
      const link = document.createElement('a');
      link.href = imageSrc;
      link.download = 'generated-music.png';
      link.click();
    }
    //also download the audio file
    if (audioRef.current) {
      const link = document.createElement('a');
      link.href = audioRef.current.src;
      link.download = 'generated-music.mp3';
      link.click();
  }
  }
  const handlePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play().catch(error => console.error('Playback error:', error));
      }
      setIsPlaying(!isPlaying);
    }
  };

  return (
    <>
      <NavBar />
      <div className="app-container">
        <input
          type="text"
          placeholder="Enter the text prompt"
          value={textPrompt}
          onChange={(e) => setTextPrompt(e.target.value)}
        />
        <input
          type="button"
          value="Submit"
          onClick={generateMusic}
        />
        
        {imageSrc && (
          <div className="image-container">
            <img src={imageSrc} alt="Generated by AI" className="generated-image"/>
            <button className="play-pause-button" onClick={handlePlayPause}>
              {isPlaying ? <AiOutlinePauseCircle color='black' size={40}/> : <AiOutlinePlayCircle color='black' size={40}/>}
            </button>
            <button className="download-button" onClick={handleDownload}>
              <HiOutlineDownload color='black' size={30}/>
            </button>
          </div>
        )}
      </div>
      <div className="imageSection">
        <img src='https://musicgenai.org/wp-content/uploads/2024/01/musicgen-models.webp' alt='musicgen-models' />
        <img src='https://ygo-assets-websites-editorial-emea.yougov.net/images/music_AdobeStock_329594746.original.jpg' alt='musicgen-models' />
        <img src='https://framerusercontent.com/images/g0wshsheaqj4o7Ah9I1WK9LRp8.jpg' alt='musicgen-models' />
      </div>
      <Footer />
    </>
  );
};

export default App;
